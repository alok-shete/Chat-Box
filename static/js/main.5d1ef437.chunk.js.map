{"version":3,"sources":["firebase.js","components/message.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","message","prop","name","toLowerCase","user","className","cx","toUpperCase","slice","App","state","messages","code","login","onAddMessage","bind","onAddName","ref","orderByKey","limitToLast","on","snapshot","text","val","id","key","setState","prevState","event","preventDefault","this","input","value","length","data","push","inputPass","onSubmit","type","placeholder","node","nodePass","map","split","classFl","classFlrxRev","classGreen","classBlue","classRight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5d1ef437.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nconst config = {\n  apiKey: \"AIzaSyArXpOHoxD74IrHGIWRt1gMuynYoXo7Xng\",\n  authDomain: \"chat-box-68581.firebaseapp.com\",\n  databaseURL: \"https://chat-box-68581.firebaseio.com\",\n  projectId: \"chat-box-68581\",\n  storageBucket: \"chat-box-68581.appspot.com\",\n  messagingSenderId: \"147318437927\",\n  appId: \"1:147318437927:web:4b2988ab687f4f4556f602\",\n};\n\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\n\nexport { database };\n","import React from \"react\";\nimport cx from \"classnames\";\n\nconst message = (prop) => {\n  return (\n    <div>\n      {prop.name.toLowerCase() === prop.user.toLowerCase() ? (\n        <div>\n          <div className={cx(\"d-flex\", \"flex-row-reverse\")}>\n            {prop.name[0].toUpperCase() + prop.name.slice(1)}\n          </div>\n          <div className={cx(\"d-flex\", \"flex-row-reverse\")}>\n            <div\n              className={cx(\n                \"alert\",\n                \"alert-success\",\n                \"alert-dismissible\",\n                \"col-sm-10\"\n              )}\n            >\n              {prop.message}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div>\n          <span>\n            {prop.name[0].toLowerCase().toUpperCase() + prop.name.slice(1)}\n          </span>\n          <div className={cx(\"d-flex\", \"flex-row\")}>\n            <div className={cx(\"alert\", \"alert-primary\", \"col-sm-10\")}>\n              {prop.message}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default message;\n","import React from \"react\";\nimport { database } from \"./firebase\";\nimport cx from \"classnames\";\nimport Message from \"./components/message\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      messages: [],\n      name: \"\",\n      code: false,\n      login: true,\n    };\n\n    this.onAddMessage = this.onAddMessage.bind(this);\n    this.onAddName = this.onAddName.bind(this);\n  }\n\n  componentWillMount() {\n    const messagesRef = database.ref(\"messages\").orderByKey().limitToLast(100);\n\n    messagesRef.on(\"child_added\", (snapshot) => {\n      const message = { text: snapshot.val(), id: snapshot.key };\n\n      this.setState((prevState) => ({\n        messages: [message, ...prevState.messages],\n      }));\n    });\n  }\n\n  onAddMessage(event) {\n    event.preventDefault();\n    if (this.input.value.length !== 0) {\n      var data = this.state.name + \"<<>>\" + this.input.value;\n      database.ref(\"messages\").push(data);\n\n      this.input.value = \"\";\n    }\n  }\n\n  onAddName(event) {\n    event.preventDefault();\n    if (this.input.value.length !== 0) {\n      if (this.inputPass.value === \"AWM\") {\n        this.setState({\n          name: this.input.value,\n          code: true,\n        });\n      } else {\n        this.setState({\n          login: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.name === \"\" ? (\n          <div>\n            <div className={cx(\"container\", \"col-sm-6\")}>\n              <div className=\"card\">\n                <div className={cx(\"card-header\", \"text-center\")}>\n                  <h3>\n                    <b>Private Chat Box</b>\n                  </h3>\n                </div>\n                <div className=\"card-footer\">\n                  <form onSubmit={this.onAddName}>\n                    <div className={cx(\"input-group\", \"mb-3\")}>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Enter Your Name...\"\n                        ref={(node) => (this.input = node)}\n                      />\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Enter Your Chat Code...\"\n                        ref={(nodePass) => (this.inputPass = nodePass)}\n                      />\n                      <div className=\"input-group-append\">\n                        <input\n                          type=\"Submit\"\n                          value=\"Enter\"\n                          className={cx(\"btn\", \"btn-outline-success\")}\n                        />\n                      </div>\n                    </div>\n                  </form>\n                  <div className=\"text-center\">\n                    {!this.state.login ? \"Enter Valid Chat Code\" : null}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={cx(\"container\", \"col-sm-6\")}>\n            <div className=\"card\">\n              <div className={cx(\"card-header\", \"text-center\")}>\n                <h3>\n                  <b>Private Chat Box</b>\n                </h3>\n              </div>\n              <div className=\"card-footer\">\n                <form onSubmit={this.onAddMessage}>\n                  <div className={cx(\"input-group\", \"mb-3\")}>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      ref={(node) => (this.input = node)}\n                    />\n                    <div className=\"input-group-append\">\n                      <input\n                        type=\"Submit\"\n                        value=\"Send\"\n                        className={cx(\"btn\", \"btn-outline-success\")}\n                      />\n                    </div>\n                  </div>\n                </form>\n              </div>\n              <div className=\"overflow\">\n                <div className={cx(\"container\", \"card-body\")}>\n                  {this.state.messages.map((message) => (\n                    <Message\n                      key={message.id}\n                      user={this.state.name}\n                      name={message.text.split(\"<<>>\")[0]}\n                      message={message.text.split(\"<<>>\")[1]}\n                      classFl=\"flex-row\"\n                      classFlrxRev=\"flex-row-reverse\"\n                      classGreen=\"alert-success\"\n                      classBlue=\"alert-primary\"\n                      classRight=\"\"\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}